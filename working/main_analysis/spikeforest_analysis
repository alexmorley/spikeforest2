#!/usr/bin/env python

from mountaintools import client as mt
import os, sys
import mlprocessors as mlpr
import mtlogging
import argparse
from copy import deepcopy

from apply_sorters_to_recordings import apply_sorters_to_recordings


@mtlogging.log(root=True)
def main():

    parser = argparse.ArgumentParser(description = 'Run a SpikeForest analysis')
    parser.add_argument('analysis_file',help='Path to the analysis specification file.')
    parser.add_argument('--login', help='Whether to log in.', action='store_true')
    parser.add_argument('--verbose', help='Provide some additional verbose output.', action='store_true')
    parser.add_argument('--test', help='Only run a few, and do not save output.', action='store_true')

    args = parser.parse_args()

    print(args)

    if args.login:
        mt.login(ask_password=True)

    mt.configDownloadFrom(['spikeforest.kbucket'])

    print('Configuring the compute resources...')
    analysis_obj = mt.loadObject(path=args.analysis_file)
    if not analysis_obj:
        raise Exception('Unable to load analysis file: {}'.format(args.analysis_file))

    analysis_name = analysis_obj['analysis_name']
    print('ANALYSIS: {}'.format(analysis_name))

    compute_resources = analysis_obj['compute_resources']
    for key, cr in compute_resources.items():
        if cr is not None:
            mlpr.configComputeResource(key, resource_name=cr.get('resource_name', None), collection=cr.get('collection', None), share_id=cr.get('share_id', None))
        else:
            mlpr.configComputeResource(key, resource_name=None)

    download_from = analysis_obj['download_from']
    if len(download_from) > 0:
        mt.configDownloadFrom(download_from)

    sorter_definitions = analysis_obj['sorters']
    sorter_codes = analysis_obj['sorter_keys']
    sorters = [sorter_definitions[sorter_code] for sorter_code in sorter_codes]
    sorters = _expand_sorters(sorters)
    print('Using sorters: ',[sorter['name'] for sorter in sorters])
    if args.verbose:
        for sorter in sorters:
            print(sorter)

    # Grab the recordings
    print('Loading the recordings...')
    recordings = []
    studies = []
    for recordings_path in analysis_obj['recordings']:
        obj = mt.loadObject(path=recordings_path)
        if obj is None:
            raise Exception('Unable to load recordings from: '+recordings_path)
        recordings = recordings + obj['recordings']
        studies = studies + obj['studies']
    print('Found {} recordings in {} studies'.format(len(recordings), len(studies)))

    output_path = analysis_obj['output']
    print('Using output path: {}'.format(output_path))

    job_timeout = analysis_obj['job_timeout']
    print('Using job timeout (sec): {}'.format(job_timeout))

    if args.test:
        print('Test mode... so only retaining a couple recordings and one study and not storing output.')
        recordings=recordings[0:2]
        studies=studies[0:1]
        output_path=None    

    upload_to = analysis_obj.get('upload_to', None)
    apply_sorters_to_recordings(label=analysis_name, sorters=sorters, recordings=recordings, studies=studies, output_path=output_path, job_timeout=float(job_timeout), upload_to=upload_to)

def _expand_sorters(sorters):
    ret = []
    for sorter in sorters:
        a = _expand_sorter(sorter)
        ret = ret + a
    return ret

def _expand_sorter(sorter):
    params = sorter['params']
    for pname, pval in params.items():
        if type(pval)==dict:
            if '_list' in pval:
                plist = pval['_list']
            elif '_range' in pval:
                plist = list(range(pval['_range'][0], pval['_range'][1], pval['_range'][2]))
            else:
                plist = None
            if plist:
                ret = []
                for ii, lval in enumerate(plist):
                    sorter2 = deepcopy(sorter)
                    sorter2['params'][pname] = lval
                    sorter2['name']=sorter2['name']+'-{}'.format(ii)
                    ret = ret + _expand_sorter(sorter2)
                return ret
    return [sorter]

if __name__ == "__main__":
    main()
