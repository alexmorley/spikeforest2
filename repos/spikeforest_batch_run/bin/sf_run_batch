#!/usr/bin/env python

import os
import sys
import argparse
import subprocess

def system_call(cmd):
  print('EXECUTING: '+cmd)
  p = subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE)
   
  while True:
      out = p.stderr.read(1)
      if not out:
        if p.poll() != None:
            break
      if out:
          sys.stdout.write(out.decode())
          sys.stdout.flush()

  if p.returncode != 0:
    raise Exception('Non-zero exit code for command: '+cmd)

if __name__== "__main__":
  parser = argparse.ArgumentParser(description = 'Run a spikeforest processing batch')
  parser.add_argument('batch_name', help='The name of the batch to run')
  parser.add_argument('--run_prefix', help='Prefix to run command', default='')
  parser.add_argument('--container', help='empty or sc', default='')
  parser.add_argument('--clear', help='First clear the jobs so that all jobs are run.',action="store_true")
  parser.add_argument('--mlpr_force_run', help='Whether to force run the MountainLab processors',action="store_true")
  parser.add_argument('--test_one', help='Only run one job and do not assemble the results',action='store_true')


  args = parser.parse_args()

  spikeforest_password=os.environ.get('SPIKEFOREST_PASSWORD',None)
  if not spikeforest_password:
    print('Environment variable not set: SPIKEFOREST_PASSWORD')
    sys.exit(-1)

  run_prefix=args.run_prefix
  if run_prefix:
    run_prefix=run_prefix+' '

  flags=[]
  if args.mlpr_force_run:
    flags.append('--mlpr_force_run')
  if args.test_one:
    flags.append('--test_one')
  flags=' '.join(flags)

  dirname=os.path.dirname(os.path.realpath(__file__))

  ## CLEAR
  if args.clear:
    system_call(dirname+'/sf_run_batch_command clear {} {}'.format(flags, args.batch_name))

  ## PREPARE
  system_call(dirname+'/sf_run_batch_command prepare {} {}'.format(flags, args.batch_name))

  ## RUN
  if args.container=='sc':
    system_call(run_prefix+dirname+'/sc_run.sh '+args.batch_name) ## Fix this!
  else:
    system_call(run_prefix+dirname+'/sf_run_batch_command run {} {}'.format(flags, args.batch_name))

  ## ASSEMBLE
  if args.test_one:
    print('Not assembling because --test_one flag was used.')
  else:
    system_call(dirname+'/sf_run_batch_command assemble_results {} {}'.format(flags, args.batch_name))
