#!/usr/bin/env python

import os
import sys
import argparse
import subprocess

def system_call(cmd):
  print('EXECUTING: '+cmd)
  p = subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE)
   
  while True:
      out = p.stderr.read(1)
      if not out:
        if p.poll() != None:
            break
      if out:
          sys.stdout.write(out.decode())
          sys.stdout.flush()

  if p.returncode != 0:
    raise Exception('Non-zero exit code for command: '+cmd)

if __name__== "__main__":
  parser = argparse.ArgumentParser(description = 'Run a spikeforest processing batch')
  parser.add_argument('batch_name', help='The name of the batch to run')
  parser.add_argument('--run_prefix', help='Prefix to run command', default='')
  parser.add_argument('--clear', help='First clear the jobs so that all jobs are run.',action="store_true")
  parser.add_argument('--mlpr_force_run', help='Whether to force run the MountainLab processors',action="store_true")
  parser.add_argument('--job_index', help='Only run one job and do not assemble the results',default='')
  parser.add_argument('--parallel', help='Number of times to simultaneously do the run command.', default='1')

  args = parser.parse_args()

  run_prefix=args.run_prefix
  if run_prefix:
    run_prefix=run_prefix+' '

  opts=[]
  if args.clear:
    opts.append('--clear')
  if args.mlpr_force_run:
    opts.append('--mlpr_force_run')
  if args.job_index:
    opts.append('--job_index {}'.format(args.job_index))
  opts=' '.join(opts)

  dirname=os.path.dirname(os.path.realpath(__file__))

  ## PREPARE
  system_call(dirname+'/sf_run_batch_command2 prepare {} {}'.format(opts, args.batch_name))

  ## RUN
  def do_run(num=0):
    system_call(run_prefix+dirname+'/sf_run_batch_command2 run {} {}'.format(flags, args.batch_name))

  num_parallel=int(args.parallel)
  if num_parallel<=1:
    do_run()
  else:
    from multiprocessing import Pool
    pool=Pool()
    pool.map(do_run, list(range(num_parallel)))

  ## ASSEMBLE
  if args.job_index:
    print('Not assembling because --job_index option was used.')
  else:
    system_call(dirname+'/sf_run_batch_command2 assemble_results {} {}'.format(flags, args.batch_name))
