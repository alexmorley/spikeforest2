{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Forest view": {
		"prefix": "forestview-view",
		"body": [
			"import vdomr as vd",
			"",
			"class ${1:name}View(vd.Component):",
    		"    def __init__(self, context, opts=None, prepare_result=None):",
			"        vd.Component.__init__(self)",
			"        self._context = context",
			"        self._opts = opts",
			"        self._size = (100, 100)",
			"        self._widget = ${1:name}Widget(context)",
            "    @staticmethod",
            "    def prepareView(context, opts):",
			"        # prepare code goes here",
			"        # Or, you can remove this function altogether",
			"        pass",
            "    def setSize(self, size):",
			"        self._size = size",
			"        self._widget.setSize(size)",
            "    def size(self):",
            "        return self._size",
            "    def tabLabel(self):",
			"        return '${2:tab_label}'",
			"    def render(self):",
			"        return self._widget",
			"",
			"class ${1:name}Widget(vd.Component):",
    		"    def __init__(self, context):",
			"        vd.Component.__init__(self)",
			"        self._context = context",
			"        self._size = (100, 100)",
            "    def setSize(self, size):",
            "        self._size = size",
            "    def size(self):",
            "        return self._size",
			"    def render(self):",
			"        return vd.div('${1:name} created via snippet.')"
		],
		"description": "Create a ForestView view class"
	}
}