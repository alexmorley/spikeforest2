# Spike sorting a SpikeForest recording

A subset of the recordings featured on the SpikeForest website are available for
public download using our Python interface. Here we describe how to download and
perform spike sorting on one of these recordings.

## Prerequisites

At this point, SpikeForest has only been tested in Linux. It should be straightforward to adapt
to OS X. It is also possible to use Linux within Windows.

## Installation

The first step is to install spikeforest and mountaintools. The easiest way is to use
the PyPI packages as follows.

```
{% include 'j2templates/install_spikeforest_pypi.sh' %}
```

To use the containerized versions of the spike sorters (recommended), you should
[install
singularity](https://www.sylabs.io/guides/3.0/user-guide/quick_start.html#quick-installation-steps).
This will work for all of the non-Matlab spike sorters (in the future we will
also containerize the Matlab packages).

## Downloading a recording

To download a SpikeForest recording, you will first need to know its `sha1dir://` URI. Presently there
is no method for obtaining this via the website, although we will provide this feature in an upcoming
release. However, we provide some test examples here.

Making use of [SpikeInterface](https://github.com/SpikeInterface/), we can load the recording and the ground truth sorting in Python:

```python
{% include 'j2templates/load_spikeforest_tetrode_recording.py' %}
```

This will automatically download the necessary files and you now have objects
representing the recording and ground truth sorting which you can manipulate
using the tools of [SpikeInterface](https://github.com/SpikeInterface/).

For our purposes, we will operate directly on the recording directory in order
to take advantage of the MountainTools caching and container capabilities. But
in the future we will be able to perform these operations directly using the
extractor objects.

```python
{% include 'j2templates/run_spike_sorting.py' %}
```

Note that when using MountainTools processors (via `execute()`), results are
automatically cached. To force rerun, use the `_force_run=True` option.

As mentioned in the comments above, you can use any of the SpikeForest-wrapped
sorting algorithms in place of MountainSort4.

Next, we can compare the result with ground truth

```python
{% include 'j2templates/compare_with_truth.py' %}
```

The above code may be run via [this python file](spike_sorting_spikeforest_recording.py).